// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/Bo0mer/os-agent/server"
)

type FakeHandler struct {
	BindingStub        func() server.Binding
	bindingMutex       sync.RWMutex
	bindingArgsForCall []struct{}
	bindingReturns     struct {
		result1 server.Binding
	}
	HandleStub        func(server.Request, server.Response)
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		arg1 server.Request
		arg2 server.Response
	}
}

func (fake *FakeHandler) Binding() server.Binding {
	fake.bindingMutex.Lock()
	fake.bindingArgsForCall = append(fake.bindingArgsForCall, struct{}{})
	fake.bindingMutex.Unlock()
	if fake.BindingStub != nil {
		return fake.BindingStub()
	} else {
		return fake.bindingReturns.result1
	}
}

func (fake *FakeHandler) BindingCallCount() int {
	fake.bindingMutex.RLock()
	defer fake.bindingMutex.RUnlock()
	return len(fake.bindingArgsForCall)
}

func (fake *FakeHandler) BindingReturns(result1 server.Binding) {
	fake.BindingStub = nil
	fake.bindingReturns = struct {
		result1 server.Binding
	}{result1}
}

func (fake *FakeHandler) Handle(arg1 server.Request, arg2 server.Response) {
	fake.handleMutex.Lock()
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		arg1 server.Request
		arg2 server.Response
	}{arg1, arg2})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		fake.HandleStub(arg1, arg2)
	}
}

func (fake *FakeHandler) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeHandler) HandleArgsForCall(i int) (server.Request, server.Response) {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return fake.handleArgsForCall[i].arg1, fake.handleArgsForCall[i].arg2
}

var _ server.Handler = new(FakeHandler)
